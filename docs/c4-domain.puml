@startuml
class Vehicle {
    + getPlateNumber(): String
    + getVehicleType(): VehicleType
}

entity VehicleType {
    + name: String
    + hourlyParkingRate: Decimal
}

interface VehicleTypeRepository {
    + findByName(): Optional<VehicleType>
}

class ParkingSpace {
    - vacantLots: Map<VehicleType, Heap<ParkingLot>>
    - reservations: Map<Vehicle, ParkingReservation>
    __
    + allocate(VehicleLots vehicleLots)
    + accept(Vehicle vehicle, Timestamp timestamp): ParkingReservation|null
    + release(Vehicle vehicle, Timestamp timestamp): ParkingReceipt|null
    .. Comments ..
    In order to dequeue the lowest available parking slot, we use min
    heap to achieve O(log*n) for reserving a slot.

    Then we use hash table to get the available parking lots per vehicle
    at runtime of O(1). This still effectively gives us a runtime of O(log*n).

    We use hash table for releasing parking lots as well. This gives us O(1).

    We also use a list of vehicleLots instead of hardcoding Integer parameters in
    the constructor to give us more flexibility should we add another vehicle type.
}

class VehicleLots {
    + getVehicleType(): VehicleType
    + getNumberOfLots(): Integer
}

class ParkingLot {
    + getName(): String
}

class ParkingReceipt {
    + getParkingReservation(): ParkingReservation
    + getExitDateTime(): LocalDateTime
    + getParkingFee(): Decimal
}

class ParkingReservation {
    + getEntryDateTime(): LocalDateTime
    + getParkingLot(): ParkingLot
    + getVehicle(): Vehicle
}

Vehicle *-- VehicleType
VehicleLots *-- VehicleType
VehicleTypeRepository -- VehicleType: provides >
ParkingSpace *-- VehicleType
ParkingSpace *-- ParkingLot: Has >
ParkingSpace -- VehicleLots: for initialization >
ParkingSpace -- Vehicle: accepts/releases >
ParkingSpace -- ParkingReservation: provides >
ParkingReservation *-- ParkingLot
ParkingReceipt *-- ParkingReservation
ParkingSpace -- ParkingReceipt: prints >

@enduml